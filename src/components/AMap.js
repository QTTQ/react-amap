/** * Created by zhouchao on 17/3/16. */import React from 'react';import { lazyAMapLoaderInstance } from '../services/amapLoader';export default class AMapComponent extends React.Component{    static defaultProps = {    zoom: 11,    center: [],    autoPosition: false,    style: {      height: '600px'    },    scale: {      visible: true,    },    toolBar:{      visible: false,      locate: false,      autoPosition: false,    },  };    static propTypes = {    style: React.PropTypes.object,  };    constructor(props) {    super(props);    this.state = {      map: null    };  }    componentWillMount() {        let { center, zoom, scale, autoPosition, toolBar, onLoad, onLocationComplete, onLocationError, onMapMove } = this.props;        const that = this;        lazyAMapLoaderInstance.load().then(function () {        let map;            if(center.length === 0){        map = new AMap.Map('map-wrapper', {          resizeEnable: true,          zoom: zoom,        });      }else{        map = new AMap.Map('map-wrapper', {          resizeEnable: true,          zoom: zoom,          center: center,        });      }            const Scale = new AMap.Scale(scale);            const ToolBar = new AMap.ToolBar(toolBar);        let geolocation = new AMap.Geolocation({        enableHighAccuracy: true,//是否使用高精度定位，默认:true        timeout: 10000,          //超过10秒后停止定位，默认：无穷大        buttonOffset: new AMap.Pixel(10, 20),//定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)        zoomToAccuracy: true,      //定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false        buttonPosition:'LB'      });        if( autoPosition == true) geolocation.getCurrentPosition();            //解析定位结果      AMap.event.addListener(geolocation, 'complete', function (data) {          onLocationComplete(data);              });            //解析定位错误信息      AMap.event.addListener(geolocation, 'error', function (data) {                onLocationError(data);              });        //地图移动结束后触发，包括平移和缩放。如地图有拖拽缓动效果，则在缓动结束后触发      map.on('moveend',function () {          onMapMove(map);              });          map.addControl(geolocation);      map.addControl(Scale);      map.addControl(ToolBar);        onLoad(map);            that.setState({map: map});          });  };  render() {        const { style, markers, marker } = this.props;        const map = this.state.map;      if(map){        markers.forEach((marker) => {        new AMap.Marker({          map: map,          icon: marker.icon,          position: [marker.position[0], marker.position[1]],          offset: new AMap.Pixel(-12, -36)        });      });            if (marker.fitView == true ) map.setFitView();    }        return (      <div>        <div id="map-wrapper" style={{...style}} ></div>      </div>    );  }}